FamstackQueryStringsusersByUserId=from UserItem where userId = :id
getUserActivityByDate=from UserActivityItem where userItem.id = :userId and calenderDate > :calenderDateStart and calenderDate <= :calenderDateEnd
deleteAllUserTaskItemsByTaskId=delete from UserTaskActivityItem where taskId =:taskId
userTaskActivityItemByTaskId=from UserTaskActivityItem where taskId =:taskId
getGroupMessages=from GroupMessageItem gmi where gmi.groupItem.groupId =:groupId and gmi.createdDate > :date
getMessagesAfterId=from GroupMessageItem gmi where gmi.groupItem.groupId =:groupId and gmi.messageId > :messageId and gmi.createdDate > :date
allUserActivityItemsFromToday=from UserActivityItem where calenderDate > :calenderDateStart
userActivityItemsFromToday=from UserActivityItem where calenderDate > :calenderDateStart and userItem.id=:userId
allUnBilledUserActivityItemsFromDatetoDate=from UserTaskActivityItem utai where actualStartTime >= :calenderDateStart and actualEndTime <= :calenderDateEnd and (type='OTHER' or type='LEAVE' or type='MEETING')
allUserTaskActivityItemsFromDatetoDate=from UserTaskActivityItem utai where actualStartTime > :calenderDateStart and actualEndTime is not null and actualEndTime < :calenderDateEnd
allUserActivityItemsFromDatetoDate=from UserActivityItem where calenderDate > :calenderDateStart and calenderDate < :calenderDateEnd
userActivityItemsFromDatetoDate=from UserActivityItem where calenderDate > :calenderDateStart and calenderDate < :calenderDateEnd and userItem.id=:userId
allUserActivityItemsFromDatetoDateAndUpcoming=from UserActivityItem where ((calenderDate > :calenderDateStart and calenderDate < :calenderDateEnd) or calenderDate > :todaysDate)
userActivityItemsFromDatetoDateAndUpcoming=from UserActivityItem where ((calenderDate > :calenderDateStart and calenderDate < :calenderDateEnd) or calenderDate >:todaysDate) and userItem.id=:userId
getUserActivities=from UserActivityItem where userItem.id = :userId and calenderDate >:startTime
getAllUserActivities=from UserActivityItem where calenderDate >:startTime
getBackLogUserActivities=from UserActivityItem where userItem.id = :userId and calenderDate >:startTime and calenderDate <:endTime
getAllBackLogUserActivities=from UserActivityItem where calenderDate >:startTime and calenderDate <:endTime
getProjectItemsByStatus=from ProjectItem where status=:status and completionTime >:startTime
getMissedTimeLineProjectItems=from ProjectItem where status !=:status and completionTime <=:completionDate and completionTime <:startTime
getAllProjectItems=from ProjectItem where completionTime >:startTime
getProjectItemsByCode=from ProjectItem item where code=:code and projectId!=:projectId
getProjectItemsByCode-OrderBy=order by item.createdDate desc
searchForProjectNames=from ProjectItem e where lower(e.name) like lower(:name)
searchForProjectNamesCodePoId=from ProjectItem e where (lower(e.name) like lower(:name) or lower(e.code) like lower(:code) or lower(e.PONumber) like lower(:PONumber))
getProjectItemCountByStatus=SELECT COUNT(e) FROM ProjectItem e where status=:status and completionTime >:startTime
getMissedTimeLineProjectItemCountByStatus=SELECT COUNT(e) FROM ProjectItem e where status!=:status and completionTime <=:completionDate and completionTime >:startTime
searchForProjectsForRepoting=FROM ProjectItem e where completionTime >=:startDate and completionTime <=:endDate
searchForProjectsWithIn=FROM ProjectItem where startTime >=:startDate and startTime <=:startDate2 and status != 'COMPLETED' and status != 'INPROGRESS'
searchForProjectsEndWithIn=FROM ProjectItem where completionTime >=:endDate and completionTime <=:endDate2  and status != 'COMPLETED'
getAllProjectTaskStartWithIn=FROM TaskItem where startTime >=:startTime and startTime <=:startTime2 and status != 'COMPLETED' and status != 'INPROGRESS'
getAllProjectTaskByProjectId=FROM TaskItem where projectItem.projectId=:projectId
getAllProjectInprogressTask=FROM TaskItem where status = :taskStatus
getAllProjectTaskEndWithIn=FROM TaskItem where completionTime >=:endDate and completionTime <=:endDate2 and status != 'COMPLETED'
getAllProjectTaskMissedDeadLine=FROM TaskItem where completionTime <=:currentTime and completionTime >:startTime and status != 'COMPLETED'
userBillableProductiveHoursSQL=select COUNT(Id) as count, id as userId, sum(billable_mins) as billableMins, sum(non_billable_mins) as nonBillableMins,sum(leave_mins) as leaveMins from user_activity_info where calender_date >:calenderDateStart and calender_date <:calenderDateEnd %s group by id
projectItemByTypeCountSQL=select type, count(project_id) from project_info where completion_time >:startTime %s group by type
teamUtilizationSQL =select team_id,count(*) total, sum(case when type = 'BILLABLE' then 1 else 0 end) billable, sum(case when type = 'NON_BILLABLE' then 1 else 0 end) nonbillable from project_info where completion_time >:startTime %s group by team_id
projectCategorySQL=select category, count(project_id) from project_info where completion_time >:startTime  %s group by category
clientProjectStatusSQL =select account_id,count(*) total, sum(case when status = 'COMPLETED' then 1 else 0 end) completed, sum(case when status != 'COMPLETED' then 1 else 0 end) notcompleted from project_info where completion_time >:startTime %s group by account_id
getPrimaryProjectsItems=FROM ProjectItem item WHERE projectId IN (select max(projectItem.projectId) from ProjectItem projectItem group by projectItem.code) and ((startTime >=:startDate and startTime <=:endDate) or (startTime <=:startDate and completionTime >=:endDate) or (completionTime >=:startDate and completionTime <=:endDate))
getPrimaryProjectsItems-OrderBy=order by item.accountId desc, item.completionTime desc
getPrimaryProjectsSearchItems=FROM ProjectItem item WHERE projectId IN (select max(projectItem.projectId) from ProjectItem projectItem where projectItem.name like :searchString or projectItem.description like :searchString or projectItem.category like :searchString group by projectItem.code)
#SELECT project_id, name, created_date, completion_time, code, status FROM project_info WHERE project_id IN (SELECT MAX(project_id) FROM project_info GROUP BY code) and completion_time >:startTime
getRecurringProject=FROM RecurringProjectItem where projectCode=:projectCode and type = 'PROJECT'
getProjectTobeRecurring=FROM ProjectItem item WHERE projectId =(select max(projectItem.projectId) from ProjectItem projectItem where projectItem.code=:projectCode)
recurringProjectCodesSQL=select project_code from recurring_prj_info where type = 'PROJECT'
recurringProjectsWithIn=FROM RecurringProjectItem where nextRun <:startTime
autoReportWithIn=FROM AutoReportingItem where nextRun <:startTime
getRecurringTask=FROM RecurringProjectItem where taskId=:taskId and type = 'TASK'
recurringTaskIdsByProjectIdSQL=select task_id from recurring_prj_info where project_id=:projectId and type = 'TASK'
projectSoftDeleteSQL=update project_info pi set deleted=true where pi.project_id IN (:projectIds)
projectUndoSoftDeleteSQL=update project_info pi set deleted=false where pi.project_id IN (:projectIds)
projectSoftDeleteOlderSQL=update project_info pi set deleted=true where pi.last_modified_date <:dateTill and pi.status = 'COMPLETED'
getAppConfigByType=from AppConfItem where type=:type
projectTeamAssigneeReportSQL=select  pi.start_time as projectStartTime,pi.completion_time as projectCompletionTime, pi.code as projectCode, pi.project_id as projectId,pi.po_number as projectNumber,pi.name as projectName,pi.status as projectStatus,pi.type as projectType,pi.category as projectCategory,pi.team_id as projectTeamId,pi.client_id as projectClientId,ti.name as taskName,utai.actual_start_time as taskActivityStartTime,utai.duration as taskActivityDuration,uai.id as userId, ti.task_id as taskId, utai.user_tsk_act_id as taskActivityId,utai.actual_end_time as taskActualEndTime, ti.task_paused_time as taskPausedTime,ti.status as taskStatus,pi.account_id as accountId, pi.project_lead as projectLead, pi.sow_line_item as sowLineItem, pi.new_category as newCategory, utai.completion_comment,utai.type as taskActType,utai.project_type as taskActProjType,utai.task_act_category as taskActCategory, ti.prj_category as taskProjectCategory, ti.task_category as taskCategory, pi.duration as projectEstDurationHrs from user_task_activity_info utai left join task_info ti on utai.task_id=ti.task_id left join user_activity_info uai on uai.user_act_id=utai.user_act_id left join project_info pi on pi.project_id=ti.project_id where utai.actual_start_time >=:startDate and utai.actual_start_time <=:endDate and utai.type!='OTHER' and utai.type!='LEAVE' and utai.type!='MEETING'
projectTeamAssigneeReportSQL-OrderBy=order by utai.actual_start_time asc, pi.code asc
projectTeamAssigneeCalanderSQL=select  pi.start_time as projectStartTime,pi.completion_time as projectCompletionTime, pi.code as projectCode, pi.project_id as projectId,pi.po_number as projectNumber,pi.name as projectName,pi.status as projectStatus,pi.type as projectType,pi.category as projectCategory,pi.team_id as projectTeamId,pi.client_id as projectClientId,utai.task_name as taskName,utai.actual_start_time as taskActualStartTime,utai.duration as taskActivityDuration,uai.id as userId, ti.task_id as taskId, utai.user_tsk_act_id as taskActivityId,utai.actual_end_time as taskActualEndTime,ti.status as taskStatus,utai.type as taskActType,utai.project_type as taskActProjType,utai.task_act_category as taskActCategory,ti.start_time as taskStartTime,ti.completion_time as taskCompletionTime,ti.duration taskDuration,pi.account_id as accountId from user_task_activity_info utai left join task_info ti on utai.task_id=ti.task_id left join user_activity_info uai on uai.user_act_id=utai.user_act_id left join project_info pi on pi.project_id=ti.project_id  where ((utai.actual_start_time >=:startDate and utai.actual_start_time <=:endDate) or (utai.start_time >=:startDate and utai.start_time <=:endDate)) 
getUserSiteActivity=FROM UserUsageActivityItem where calenderDate >:startCalenderDate and calenderDate <:endCalenderDate and userId =:userId
getUserSiteActivityByDate=FROM UserUsageActivityItem where calenderDate >:startCalenderDate and calenderDate <:endCalenderDate and userGroupId =:userGroupId
getUserSiteActivityAllByDate=FROM UserUsageActivityItem where calenderDate >:startCalenderDate and calenderDate <:endCalenderDate
getUserSiteActivityByDate-OrderBy=order by userId
getAllTimeExceedsProjectTasks=FROM UserTaskActivityItem where actualStartTime <=:timeLimitTime and actualEndTime is null
dashboardEmployeesUtilizationSQL=select uai.id as userId, (sum(utai.duration)/480)*100 as durationPercentage, sum(utai.duration) as duration from user_info ui,user_task_activity_info utai, user_activity_info uai where utai.user_act_id=uai.user_act_id and uai.id=ui.id and utai.type !='LEAVE' and utai.actual_start_time >:startDate and utai.actual_start_time <=:endDate
dashboardEmployeesUtilizationSQL-OrderBy=group by ui.id
dashboardEmployeesLeaveSQL=select uai.id as userId,ui.first_name  from user_info ui,user_task_activity_info utai, user_activity_info uai where utai.user_act_id=uai.user_act_id and uai.id=ui.id and utai.type ='LEAVE' and utai.actual_start_time >:startDate and utai.actual_start_time <=:endDate
dashboardEmployeesLeaveSQL-OrderBy= group by ui.id order by ui.first_name
dashboardEmployeesCalendarLeaveSQL=select ui.id as userId,ui.first_name,  DATE_FORMAT(utai.actual_start_time, '%Y-%m-%d')  from user_info ui,user_task_activity_info utai, user_activity_info uai where utai.user_act_id=uai.user_act_id and uai.id=ui.id and utai.type ='LEAVE' and utai.actual_start_time >:startDate and utai.actual_start_time <=:endDate
dashboardEmployeesCalendarLeaveSQL-OrderBy=group by uai.id;
projectOverAllUtilizationSQL=select utai.actual_start_time, sum(case when utai.project_type = 'BILLABLE' then utai.duration else 0 end) as billable,  sum(case when utai.project_type = 'NON_BILLABLE' then utai.duration else 0 end) as nonbillable, pi.account_id, pi.team_id, uai.id as userId from user_info ui, user_activity_info uai, user_task_activity_info utai, task_info ti, project_info pi where uai.id=ui.id and utai.user_act_id=uai.user_act_id and utai.task_id=ti.task_id and pi.project_id=ti.project_id and utai.type !='LEAVE' and actual_start_time is not null and utai.actual_start_time >:startDate and utai.actual_start_time <=:endDate
dashboardProjectDetails=FROM ProjectItem pi WHERE ((startTime >=:startDate and startTime <=:endDate) or (startTime <=:startDate and completionTime >=:endDate) or (completionTime >=:startDate and completionTime <=:endDate))
poEstimateReportSQL=select pi.start_time as projectStartTime,pi.completion_time as projectCompletionTime, pi.code as projectCode, pi.project_id as projectId,pi.po_number as projectNumber,pi.name as projectName,pi.status as projectStatus,pi.type as projectType,pi.category as projectCategory,pi.team_id as projectTeamId,pi.client_id as projectClientId,pi.account_id as accountId, pi.project_lead as projectLead, pi.sow_line_item as sowLineItem, pi.new_category as newCategory, pi.duration as projectEstDurationHrs, sum(utai.duration) as projectTaskActivityDuration,ti.prj_category as taskProjectCategory, ti.task_category from user_task_activity_info utai left join task_info ti on utai.task_id=ti.task_id left join user_activity_info uai on uai.user_act_id=utai.user_act_id left join project_info pi on pi.project_id=ti.project_id where ((pi.start_time >=:startDate and pi.start_time <=:endDate) or (pi.start_time <=:startDate and pi.completion_time >=:endDate) or (pi.completion_time >=:startDate and pi.completion_time <=:endDate)) and utai.type!='OTHER' and utai.type!='LEAVE' and utai.type!='MEETING'
poEstimateReportSQL-OrderBy=group by pi.project_id order by pi.start_time
teamwiseUtilizationSQL=select ugi.user_grp_id, IFNULL(tu.holidayMins,0) as holidayMins, IFNULL(tu.leaveMins,0) as leaveMins, IFNULL(tu.billableMins,0) as billableMins, IFNULL(tu.nonbillableMins,0) as nonbillableMins, ugi.name from user_group_item ugi left join(select utai.user_grp_id as user_grp_id, sum(case when (utai.project_type = 'NON_BILLABLE' and (utai.task_act_category = 'Holiday' or utai.task_name = 'Holiday')) then utai.duration else 0 end) as holidayMins, sum(case when (utai.project_type = 'NON_BILLABLE' and (utai.type = 'LEAVE' or utai.task_act_category = 'Leave Or Holiday')) then utai.duration else 0 end) as leaveMins, sum(case when utai.project_type = 'BILLABLE' then utai.duration else 0 end) as billableMins,  sum(case when ((utai.project_type = 'NON_BILLABLE' and utai.type != 'LEAVE' and utai.task_act_category != 'Leave Or Holiday' and utai.task_act_category != 'Holiday' and utai.task_name != 'Holiday') or (utai.project_type = 'NON_BILLABLE' and utai.type='PROJECT')) then utai.duration else 0 end) as nonbillableMins from user_task_activity_info utai where actual_start_time is not null and utai.actual_start_time >=:startDate and utai.actual_start_time <=:endDate and utai.duration >=0 group by utai.user_grp_id) tu on tu.user_grp_id = ugi.id where ugi.id in (:groupIds);
teamwiseUtilizationComparisonSQL=select utai.user_grp_id, DATE_FORMAT(utai.actual_start_time, '%Y') as yearString, DATE_FORMAT(utai.actual_start_time, '%m') as monthString, DATE_FORMAT(utai.actual_start_time, '%d') as dateString,sum(case when (utai.project_type = 'NON_BILLABLE' and (utai.task_act_category = 'Holiday' or utai.task_name = 'Holiday')) then utai.duration else 0 end) as holidayMins, sum(case when (utai.project_type = 'NON_BILLABLE' and (utai.type = 'LEAVE' or utai.task_act_category = 'Leave Or Holiday')) then utai.duration else 0 end) as leaveMins, sum(case when utai.project_type = 'BILLABLE' then utai.duration else 0 end) as billableMins,  sum(case when ((utai.project_type = 'NON_BILLABLE' and utai.type != 'LEAVE' and utai.task_act_category != 'Leave Or Holiday' and utai.task_act_category != 'Holiday' and utai.task_name != 'Holiday') or (utai.project_type = 'NON_BILLABLE' and utai.type='PROJECT')) then utai.duration else 0 end) as nonbillableMins from user_task_activity_info utai where utai.actual_start_time is not null and utai.duration >=0